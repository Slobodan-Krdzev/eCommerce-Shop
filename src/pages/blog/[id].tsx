import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import PageTitle from "../../components/PageTitle";
import RelatedBlogs from "../../components/RelatedBlogs";
import { userandomNumber } from "../../hooks/useRandomNumber";
import { BlogType } from "../../types/types";

type BlogDetailsProps = {
  blog: BlogType
}

const BlogDetail: NextPage<BlogDetailsProps> = ({blog: {
  title,
  category,
  img,
  author,
  date,
  first_content,
  second_content,
}, }) => {

  const {query} = useRouter()
  const [relatedBlogs, setRelatedBlogs] = useState<BlogType[]>([])
  const randomNum = userandomNumber(9)


  useEffect(() => {
    fetch(`http://localhost:5001/blogs?_start=${randomNum}&_limit=3`)
      .then(res => res.json())
      .then(blogs => setRelatedBlogs(blogs))

  }, [query])

  return (
    <>
      <Head>
        <title>Store - title</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle />

      <section className="bg0 p-t-52 p-b-20">
        <div className="container">
          <div className="row">
            <div className="col-md-8 col-lg-9 p-b-80">
              <div className="p-r-45 p-r-0-lg">
                <div className="wrap-pic-w how-pos5-parent">
                  <Image src={img} alt="IMG-BLOG" width={774} height={518.94}/>
                </div>

                <div className="p-t-32">
                  <span className="flex-w align-items-center flex-m stext-111 cl2 p-b-19">
                    <span className="flex-c-m mr-3 bor7 p-lr-15 trans-04">
                      {category}
                    </span>

                    <span>
                      <span className="cl4">By</span> {author}
                      <span className="cl12 m-l-4 m-r-6">|</span>
                    </span>

                    <span>{date}</span>
                  </span>

                  <h4 className="ltext-109 cl2 p-b-28">{title}</h4>

                  <p className="stext-117 cl6 p-b-26">{first_content}</p>

                  <p className="stext-117 cl6 p-b-26">{second_content}</p>
                </div>
              </div>
            </div>

            <div className="col-md-4 col-lg-3 p-b-80">
              <div className="side-menu">
                <RelatedBlogs blogs={relatedBlogs}/>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export default BlogDetail;

export const getStaticPaths: GetStaticPaths = async () => {
  const res = await fetch("http://localhost:5001/blogs");
  const data: BlogType[] = await res.json();

  const blogPaths = data.map((blog) => {
    return {
      params: {
        id: blog.id,
      },
    };
  });

  return {
    paths: blogPaths,
    fallback: "blocking",
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {

  const id = params?.id;

 

  try {

    const [blogRes] = await Promise.all([
      fetch(`http://localhost:5001/blogs/${id}`),
      
    ])

    const [blog] = await Promise.all([
      blogRes.json()
    ])

    return {
      props: {
        blog
      },
    };
  } catch (err) {
    return {
      notFound: true,
    };
  }
};
